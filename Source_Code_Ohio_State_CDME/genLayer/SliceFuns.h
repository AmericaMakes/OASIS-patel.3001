/*============================================================//
Copyright (c) 2020 America Makes
All rights reserved
Created under ALSAM project 3024

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//============================================================*/

/*============================================================//
SliceFuns.h defines funtions and data structures to read the STL
file, generate slices from it and write the topology in
appropriate LAYER format
//============================================================*/

#pragma once

#ifndef SLICEFUNS_H_
#define SLICEFUNS_H_

#include <iostream>
#include <vector>
#include <string>
#include <stdlib.h>
#include <stdio.h>
#include <msxml6.h>
#include <comdef.h>
#include <tchar.h>
#include <conio.h>
#include <sstream>
#include <fstream>
#include <math.h>
#include <cctype>
#include <algorithm>
#include <iterator>

#include "readExcelConfig.h"

using namespace std;

struct obj
{
	string fn;//name of stl file
	int cntOffset;//offset
	int totLayer;//total number of layers in the stl file at given slicing thickness	
};

struct vertex
{
	double x;
	double y;
	double z;
	string cord_sys;
};

//not used
struct normal
{
	double nx;
	double ny;
	double nz;
}; 

struct edge
{
	int start_idx;
	int end_idx;
	string curvetype;
	normal n;//not used
};

//regions and loops essentially contains same information represented in different forms to be used for different purposes
struct region
{
	string type;		// inner or outer boundary
	string tag;			// user defined tag that relates this region to contour and hatch scan strategies
	vector<edge> eList;	// edges that define the boundary of this region
	int contourTraj;	// Trajectory# for contours, based on the part this region came from
	int hatchTraj;		// Trajectory# for hatches, based on the part this region came from
};

struct loop
{
	string type;		// inner or outer
	string tag;			// user defined tag to relate to contour and hatch strategies
	vector<vertex> vList;
	int contourTraj;	// Trajectory# for contours, based on the part this region came from
	int hatchTraj;		// Trajectory# for hatches, based on the part this region came from
};

struct slice
{
	vector<region> rList;
	vector<loop> lpList;
};

struct layer
{
	int isEmpty = 1;
	double zHeight;
	double thickness;
	vector<vertex> vList;
	slice us;
	slice ls;
};

struct Linfo
{
	double zHeight;
	string fn;
};

// invokes slic3r to generate all points of intersections between triangulated surfaces and desired planes
int runSlic3r(string fn, double layerThickness_mm, string executableFolder);

//read an SVG file generated by slic3r to get information for a particular layer number, and assign appropriate tags and trajectory#'s
int readFile(string fn, long numLayer, layer* L, string rTag, string cSys, int cTraj, int hTraj);

//helper function to get vertices listed in a particular loop in the output file of slic3r
string getVlist(string s, int type);

// get individual vertices in a particular loop in the output file of slic3r from the list
void getVertices(string vs, vector<vertex>& vl, string cSys);

// display the contents of a layer
void displayLayer(layer L);

// display layer in a different format
void displayFLayer(layer L);

//refine the layer data structure to make it ready to be written to xml
void refineLayer(layer *L);

//scale layer according to inputs. not used
void scaleLayer(layer *L, double mag, double xo, double yo);

//compare to vertices to see if they are same
int cmpVertex(vertex v1, vertex v2);

//find a particular vertex from a list
int findVertex(vector<vertex> vList, vertex v);

//get total number of layers that would be generated from a stl at a given thickness
int getNumLayer(string fn);

//combine layers with different tags at the same z height
layer combLayer(vector<layer> vL);

//find how much the stl file offset from origin
vertex findOffset(string fn);

//find the bounding box of the stl
vector<vertex> findBoundary(string fn);

//determine bounding box of single stripes (if included) and append to the vL/vR/vT/vB vectors
void includeStripesInBBox(AMconfig &configData, vector<double> &vL, vector<double> &vR, vector<double> &vB, vector<double> &vT);

//check if the stl file is in binary or ASCII format
int ckFile(string fn);
#endif